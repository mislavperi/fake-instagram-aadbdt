// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mislavperi/fake-instagram-aadbdt/server/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// AuthenticateGithubUser provides a mock function with given fields: credentials
func (_m *UserService) AuthenticateGithubUser(credentials models.GHCredentials) (*string, *string, error) {
	ret := _m.Called(credentials)

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(models.GHCredentials) (*string, *string, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(models.GHCredentials) *string); ok {
		r0 = rf(credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(models.GHCredentials) *string); ok {
		r1 = rf(credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(models.GHCredentials) error); ok {
		r2 = rf(credentials)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthenticateGoogleUser provides a mock function with given fields: credentials
func (_m *UserService) AuthenticateGoogleUser(credentials models.GoogleToken) (*string, *string, error) {
	ret := _m.Called(credentials)

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(models.GoogleToken) (*string, *string, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(models.GoogleToken) *string); ok {
		r0 = rf(credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(models.GoogleToken) *string); ok {
		r1 = rf(credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(models.GoogleToken) error); ok {
		r2 = rf(credentials)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: firstName, lastName, username, email, password
func (_m *UserService) Create(firstName string, lastName string, username string, email string, password string) error {
	ret := _m.Called(firstName, lastName, username, email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(firstName, lastName, username, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: adminID
func (_m *UserService) GetAllUsers(adminID int) ([]models.User, error) {
	ret := _m.Called(adminID)

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.User, error)); ok {
		return rf(adminID)
	}
	if rf, ok := ret.Get(0).(func(int) []models.User); ok {
		r0 = rf(adminID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInformation provides a mock function with given fields: id
func (_m *UserService) GetUserInformation(id int) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLogs provides a mock function with given fields: userID, adminID
func (_m *UserService) GetUserLogs(userID int, adminID int) ([]models.Log, error) {
	ret := _m.Called(userID, adminID)

	var r0 []models.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Log, error)); ok {
		return rf(userID, adminID)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Log); ok {
		r0 = rf(userID, adminID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAdminPlanChange provides a mock function with given fields: adminID, userID, planID
func (_m *UserService) InsertAdminPlanChange(adminID int, userID int, planID int) error {
	ret := _m.Called(adminID, userID, planID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(adminID, userID, planID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: username, password
func (_m *UserService) Login(username string, password string) (*string, *string, error) {
	ret := _m.Called(username, password)

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, *string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *string); ok {
		r1 = rf(username, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectUserPlan provides a mock function with given fields: id, plan
func (_m *UserService) SelectUserPlan(id int, plan models.Plan) error {
	ret := _m.Called(id, plan)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, models.Plan) error); ok {
		r0 = rf(id, plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
