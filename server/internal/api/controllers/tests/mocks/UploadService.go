// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mislavperi/fake-instagram-aadbdt/server/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// UploadService is an autogenerated mock type for the UploadService type
type UploadService struct {
	mock.Mock
}

// GetConsumption provides a mock function with given fields: userID
func (_m *UploadService) GetConsumption(userID int) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExpandedStatistics provides a mock function with given fields: userID
func (_m *UploadService) GetExpandedStatistics(userID int) (*models.User, *models.Plan, *uint64, *int, *int, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	var r1 *models.Plan
	var r2 *uint64
	var r3 *int
	var r4 *int
	var r5 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, *models.Plan, *uint64, *int, *int, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *models.Plan); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Plan)
		}
	}

	if rf, ok := ret.Get(2).(func(int) *uint64); ok {
		r2 = rf(userID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*uint64)
		}
	}

	if rf, ok := ret.Get(3).(func(int) *int); ok {
		r3 = rf(userID)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*int)
		}
	}

	if rf, ok := ret.Get(4).(func(int) *int); ok {
		r4 = rf(userID)
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).(*int)
		}
	}

	if rf, ok := ret.Get(5).(func(int) error); ok {
		r5 = rf(userID)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// GetStatistics provides a mock function with given fields: userID
func (_m *UploadService) GetStatistics(userID int) (*models.Plan, *uint64, *int, *int, error) {
	ret := _m.Called(userID)

	var r0 *models.Plan
	var r1 *uint64
	var r2 *int
	var r3 *int
	var r4 error
	if rf, ok := ret.Get(0).(func(int) (*models.Plan, *uint64, *int, *int, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Plan); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *uint64); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uint64)
		}
	}

	if rf, ok := ret.Get(2).(func(int) *int); ok {
		r2 = rf(userID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*int)
		}
	}

	if rf, ok := ret.Get(3).(func(int) *int); ok {
		r3 = rf(userID)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*int)
		}
	}

	if rf, ok := ret.Get(4).(func(int) error); ok {
		r4 = rf(userID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

type mockConstructorTestingTNewUploadService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploadService creates a new instance of UploadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploadService(t mockConstructorTestingTNewUploadService) *UploadService {
	mock := &UploadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
