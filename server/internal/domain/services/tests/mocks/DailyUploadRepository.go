// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mislavperi/fake-instagram-aadbdt/server/internal/infrastructure/psql/models"
	mock "github.com/stretchr/testify/mock"
)

// DailyUploadRepository is an autogenerated mock type for the DailyUploadRepository type
type DailyUploadRepository struct {
	mock.Mock
}

// GetUserConsumption provides a mock function with given fields: userId
func (_m *DailyUploadRepository) GetUserConsumption(userId int) ([]*models.DailyUpload, error) {
	ret := _m.Called(userId)

	var r0 []*models.DailyUpload
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*models.DailyUpload, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []*models.DailyUpload); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DailyUpload)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLog provides a mock function with given fields: userID, pictureID, uploadSizeKb
func (_m *DailyUploadRepository) InsertLog(userID int64, pictureID int64, uploadSizeKb uint64) error {
	ret := _m.Called(userID, pictureID, uploadSizeKb)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, uint64) error); ok {
		r0 = rf(userID, pictureID, uploadSizeKb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDailyUploadRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDailyUploadRepository creates a new instance of DailyUploadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDailyUploadRepository(t mockConstructorTestingTNewDailyUploadRepository) *DailyUploadRepository {
	mock := &DailyUploadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
